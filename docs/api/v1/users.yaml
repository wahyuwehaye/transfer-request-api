paths:
  /users/register:
    post:
      tags:
      - Users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  description: Should be at least 8 characters and alphanumeric
                role:
                  type: string
                  enum:
                  - maker
                  - approver
                  - admin
                  description: The role of the user.
      responses:
        200:
          description: User registered successfully
        400:
          description: Invalid input
        500:
          description: Server error

  /users/login:
    post:
      tags:
      - Users
      summary: Login an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for further API calls.
        400:
          description: Invalid username or password
        500:
          description: Server error

  /users/{userId}:
    get:
      tags:
      - Users
      summary: Fetch a user by their ID
      parameters:
      - name: userId
        in: path
        description: ID of the user to fetch
        required: true
        schema:
          type: string
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  role:
                    type: string
        404:
          description: User not found
        500:
          description: Server error

  /users/{userId}:
    put:
      tags:
      - Users
      summary: Update user details
      parameters:
      - name: userId
        in: path
        description: ID of the user to update
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                role:
                  type: string
                  enum:
                  - maker
                  - approver
                  - admin
      responses:
        200:
          description: User updated successfully
        400:
          description: Invalid input
        404:
          description: User not found
        500:
          description: Server error
